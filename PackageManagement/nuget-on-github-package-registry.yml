name: Push Nuget Package to GitHub Package Registry

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'

# CONFIGURATION
#
# 1. Set the environment variables for your Build Configuration (Release/Debug), .NET Version
#    and GitHub Package Registry URL as appropriate.
#
# 2. Ensure that your csproj file is configured correctly as outlined in the documentation below:
#    https://docs.github.com/en/free-pro-team@latest/packages/using-github-packages-with-your-projects-ecosystem/configuring-dotnet-cli-for-use-with-github-packages#publishing-a-package
#
# 3. Notice that in the actions/setup-dotnet action that there is a NUGET_AUTH_TOKEN environment
#    variable set to the value of secrets.GITHUB_TOKEN
#    You can find more information on that in the documentation below.
#   https://docs.github.com/en/free-pro-team@latest/packages/using-github-packages-with-your-projects-ecosystem/using-github-packages-with-github-actions#authenticating-to-package-registries-on-github

env:
  BUILD_CONFIGURATION: 'Release'                                           # set this to the appropriate build configuration
  DOTNET_VERSION: '3.1.x'                                                  # set this to the dot net version to use
  REGISTRY_URL: https://nuget.pkg.github.com/yourorganisation/index.json   # set this to the registry url for your GitHub package registry

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:

      # Checkout the repo
      - uses: actions/checkout@master
      
      # Setup .NET Core SDK
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          source-url: ${{ env.REGISTRY_URL }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Setup the .NET Core SDK with the appropriate auth token to access the GitHub Package Registry
      
      # Run dotnet build and package
      - name: dotnet build and publish
        run: |
          dotnet restore
          dotnet build --configuration '${{ env.BUILD_CONFIGURATION }}'
          dotnet pack -c '${{ env.BUILD_CONFIGURATION }}'
          
      # Publish the package to GitHub Package Registry
      - name: 'dotnet publish'
        run: dotnet nuget push bin/Release/*.nupkg

# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
